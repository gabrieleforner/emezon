import { SessionPayload } from "@models/SessionPayloadModel"
import { User } from "@models/UserModel"
import { Response } from "express"
import { UserAPIError } from "@models/ErrorModels"
import { createHash } from "crypto"
import { invalidateSession } from "@controllers/auth/SessionController"
import Services from "@utils/Services"

async function editUserInfoController(sessionPayload: SessionPayload, field: string, body: any, res: Response) {
    try {
        // Check if the field to patch has been defined
        if (field == undefined || field.length < ("name".length)) {
            throw new UserAPIError(
                400,
                "ERR_MISSING_FIELD",
                "You must define the field you want to patch"
            )
        }
        const userInfo: User = await Services.getInstance().getEntity(User, { email: sessionPayload.email }) as User
        const newFieldValue: string = body[field]

        // Check if the new field value exists in the body
        if (newFieldValue == undefined || newFieldValue.length == 0) {
            throw new UserAPIError(
                400,
                "ERR_MISSING_FIELD_VALUE",
                "You must define the new field value"
            )
        }

        if (field === "roles") {
            if (!Array.isArray(body.roles)) {
                throw new UserAPIError(
                    400,
                    "ERR_INVALID_ROLES",
                    "Roles must be an array of strings"
                )
            }
            userInfo.roles = body.roles
        } else if (field === "password") {
            const newPassword = createHash('sha256').update(newFieldValue).digest('hex');
            userInfo.passwordHash = newPassword
        } else {
            const key = field as keyof User
            userInfo[key] = newFieldValue as any
        }

        // TODO: Produce PubSub Event "EmailChanged"
        Services.getInstance().updateEntity(User, { email: sessionPayload.email }, userInfo);
        if (field == "email") {
            Services.getInstance().deleteRedisValue(`jwt:session:${sessionPayload.email}`);
        }
        res.status(200).json({ success: true });

    }
    catch (error) {
        if (error instanceof UserAPIError) {
            res
                .status(error.httpCode)
                .json({
                    errorString: error.errorString,
                    errorMessage: error.message
                })
        }
        else {
            res
                .status(500)
                .json({
                    errorString: "ERR_INTERNAL_SERVER",
                    errorMessage: "Error generated by the server"
                })
            console.log(error)
        }
    }
}

export default editUserInfoController