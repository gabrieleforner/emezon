/*

 */
import { Router } from 'express';
import {AuthenticationAPIError} from "@models/ErrorModels";
import {LoginRequestBody, SignupRequestBody} from "@models/RequestBodyModels";
import loginController from "@controllers/auth/LoginController";
import signupController from "@controllers/auth/SignupController";
import {invalidateSession} from "@controllers/auth/SessionController";
import checkSessionMiddleware from '@controllers/auth/SessionMiddleware';

const authenticationRoutes: Router = Router();

authenticationRoutes.post(`/login`, async (req, res) => {
    try {
        const requestFields: LoginRequestBody = req.body as LoginRequestBody;
        if(requestFields.email == undefined || requestFields.email.length == 0 ) {
            throw new AuthenticationAPIError(
                400,
                "ERR_MISSING_EMAIL",
                "Email is required to log in"
            );
        }
        if(requestFields.password == undefined || requestFields.password.length == 0 ) {
            throw new AuthenticationAPIError(
                400,
                "ERR_MISSING_PASSWORD",
                "Password is required to log in"
            );
        }
        await loginController(requestFields, res);
    }
    catch (error) {
        if(error instanceof AuthenticationAPIError) {
            res
                .status(error.httpCode)
                .json({
                    errorString: error.errorString,
                    errorMessage: error.message
                });
        }
        else {
            res
                .status(500)
                .json({
                    errorString: "ERR_INTERNAL_SERVER",
                    errorMessage: "Error generated by the server"
                })
            console.log(error);
        }
    }
});
authenticationRoutes.post(`/signup`, async (req, res) => {
    try {
        const requestFields: SignupRequestBody = req.body as SignupRequestBody;
        if(requestFields.email == undefined || requestFields.email.length == 0 ) {
            throw new AuthenticationAPIError(
                400,
                "ERR_MISSING_EMAIL",
                "Email is required to sign up"
            );
        }
        if(requestFields.password == undefined || requestFields.password.length == 0 ) {
            throw new AuthenticationAPIError(
                400,
                "ERR_MISSING_PASSWORD",
                "Password is required to sign up"
            );
        }
        await signupController(requestFields, res);
    }
    catch (error) {
        if(error instanceof AuthenticationAPIError) {
            res
                .status(error.httpCode)
                .json({
                    errorString: error.errorString,
                    errorMessage: error.message
                });
        }
        else {
            res
                .status(500)
                .json({
                    errorString: "ERR_INTERNAL_SERVER",
                    errorMessage: "Error generated by the server"
                })
            console.log(error);
        }
    }
});
authenticationRoutes.get(`/validate`, checkSessionMiddleware, async (req, res) => {
    const payload = req.sessionPayload
    res.status(200).json({
        sessionValid: req.isSessionValid,
        payload
    });
})
authenticationRoutes.delete(`/logout`, checkSessionMiddleware, async (req, res) => {
    try {
        await invalidateSession(req.header('Authorization'), req.sessionPayload!, res)
    }
    catch (error) {
        if(error instanceof AuthenticationAPIError) {
            res
                .status(error.httpCode)
                .json({
                    errorString: error.errorString,
                    errorMessage: error.message
                });
        }
        else {
            res
                .status(500)
                .json({
                    errorString: "ERR_INTERNAL_SERVER",
                    errorMessage: "Error generated by the server"
                })
            console.log(error);
        }
    }
})

export default authenticationRoutes;