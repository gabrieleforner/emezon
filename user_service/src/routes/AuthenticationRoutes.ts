/*

 */
import { Router } from 'express';
import {AuthenticationAPIError} from "@models/ErrorModels";
import {LoginRequestBody, SignupRequestBody} from "@models/RequestBodyModels";
import loginController from "@controllers/auth/LoginController";
import signupController from "@controllers/auth/SignupController";
import checkSession from "@controllers/auth/SessionMiddleware";
import {invalidateSession} from "@controllers/auth/SessionController";

const authenticationRoutes: Router = Router();

authenticationRoutes.post(`/login`, async (req, res) => {
    try {
        const requestFields: LoginRequestBody = req.body as LoginRequestBody;
        if(requestFields.email == undefined || requestFields.email.length == 0 ) {
            throw new AuthenticationAPIError(
                400,
                "ERR_MISSING_EMAIL",
                "Email is required to log in"
            );
        }
        if(requestFields.password == undefined || requestFields.password.length == 0 ) {
            throw new AuthenticationAPIError(
                400,
                "ERR_MISSING_PASSWORD",
                "Password is required to log in"
            );
        }
        await loginController(requestFields, res);
    }
    catch (err) {
        if(err instanceof AuthenticationAPIError) {
            res
                .status(err.httpCode)
                .json({
                    errorString: err.errorString,
                    errorMessage: err.message
                });
        }
        else {
            res
                .status(500)
                .json({
                    errorString: "ERR_INTERNAL_SERVER",
                    errorMessage: "Error generated by the server"
                })
            console.log(err);
        }
    }
});
authenticationRoutes.post(`/signup`, async (req, res) => {
    try {
        const requestFields: SignupRequestBody = req.body as SignupRequestBody;
        if(requestFields.email == undefined || requestFields.email.length == 0 ) {
            throw new AuthenticationAPIError(
                400,
                "ERR_MISSING_EMAIL",
                "Email is required to sign up"
            );
        }
        if(requestFields.password == undefined || requestFields.password.length == 0 ) {
            throw new AuthenticationAPIError(
                400,
                "ERR_MISSING_PASSWORD",
                "Password is required to sign up"
            );
        }
        await signupController(requestFields, res);
    }
    catch (err) {
        if(err instanceof AuthenticationAPIError) {
            res
                .status(err.httpCode)
                .json({
                    errorString: err.errorString,
                    errorMessage: err.message
                });
        }
        else {
            res
                .status(500)
                .json({
                    errorString: "ERR_INTERNAL_SERVER",
                    errorMessage: "Error generated by the server"
                })
            console.log(err);
        }
    }
});
authenticationRoutes.get(`/validate`, checkSession, async (req, res) => {
    try {
        // TODO: Scrivere Validation sessione (ritorna email, tempo alla scadenza)
    }
    catch (err) {
        if(err instanceof AuthenticationAPIError) {
            res
                .status(err.httpCode)
                .json({
                    errorString: err.errorString,
                    errorMessage: err.message
                });
        }
        else {
            res
                .status(500)
                .json({
                    errorString: "ERR_INTERNAL_SERVER",
                    errorMessage: "Error generated by the server"
                })
            console.log(err);
        }
    }
})
authenticationRoutes.delete(`/logout`, checkSession, async (req, res) => {
    try {
        await invalidateSession(req.header('Authorization'), res)
    }
    catch (err) {
        if(err instanceof AuthenticationAPIError) {
            res
                .status(err.httpCode)
                .json({
                    errorString: err.errorString,
                    errorMessage: err.message
                });
        }
        else {
            res
                .status(500)
                .json({
                    errorString: "ERR_INTERNAL_SERVER",
                    errorMessage: "Error generated by the server"
                })
            console.log(err);
        }
    }
})

export default authenticationRoutes;